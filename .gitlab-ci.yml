# include:
#   - local: "pipeline-stages/eurosPart.yml"
#   - local: "pipeline-stages/timsPart.yml"

# stages:
#   - start_services
#   # - security_scan
#   - run_pen_test
#   - save_results
#   - visualize

stages:
  - start_services
  - run_pen_test
  - save_results
  - visualize

# 1️⃣ Juice Shop 실행 (로컬에서 실행됨)
start_services:
  image: docker:latest
  stage: start_services
  services:
    - docker:dind
  tags:
    # - euro-mac
    - yaroslav-mac
  script:
    - echo "Checking if Juice Shop is already running..."
    - docker ps -a | grep "juice-shop" && docker rm -f juice-shop || echo "No existing container."
    - echo "Starting Juice Shop..."
    - docker run -d --name juice-shop -p 3000:3000 bkimminich/juice-shop
    - sleep 5
    - docker ps

# Stage 2
run_pen_test:
  stage: run_pen_test
  tags:
    # - tim-mac
    - yaroslav-mac

  image: owasp/zap2docker-stable
  script:
    # Run your command and capture its output.
    # - zap-cli scripts -f "/Users/timothytay/Desktop/sweng2025/sweng25_group36-workdaysecurity/zest-scrips/sql_injection_fail.zst" > output.txt
    - zap.sh -cmd -script "/Users/timothytay/Desktop/sweng2025/sweng25_group36-workdaysecurity/zest-scrips/sql_injection_fail.zst" >> data/output.txt
    - zap.sh -cmd -script "/Users/timothytay/Desktop/sweng2025/sweng25_group36-workdaysecurity/zest-scrips/premium_key_get.zst" >> data/output.txt

    - python3 py-scripts/json_processing.py data/output.txt data/output.json

  # Artifacts are saved even if the job fails:
  artifacts:
    when: always
    paths:
      - data/output.txt
      - data/output.json


# 3️⃣ JSON 데이터를 PostgreSQL에 저장
save_results:
  image: python:3.9
  stage: save_results
  needs:
    - run_pen_test
  before_script:
    - pip3 install python-dotenv
  tags:
    # euro-mac
    - yaroslav-mac
  script:
    - python3 py-scripts/send_test_results_to_SQL.py
  allow_failure: false

# 4️⃣ Grafana
grafana_visualization:
  stage: visualize
  tags:
    # euro-mac
    - yaroslav-mac
  script:
    - echo "Stopping any existing Grafana container..."
    - docker stop grafana || true
    - docker rm grafana || true

    - echo "Starting Grafana with PostgreSQL as its database and provisioning settings..."
    - docker run -d --name=grafana 
        -p 4000:3000 
        -v grafana_data:/var/lib/grafana 
        -v $CI_PROJECT_DIR/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards 
        -v $CI_PROJECT_DIR/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources 
        -v $CI_PROJECT_DIR/grafana/dashboards:/var/lib/grafana/dashboards
        grafana/grafana:latest

    - sleep 20  

    - echo "Checking Grafana logs..."
    - docker logs grafana

    - echo "Testing Grafana provisioning..."
    - curl -s -u admin:admin http://localhost:4000/api/search?query=