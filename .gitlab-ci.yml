#demo9

# include:
#   - local: "pipeline-stages/eurosPart.yml"
#   - local: "pipeline-stages/timsPart.yml"

# stages:
#   - start_services
#   # - security_scan
#   - run_pen_test 
#   - save_results
#   - visualize 

stages:
  - start_services
  - extract_metadata
  - run_pen_test
  - save_results
  - visualize

# 1️⃣ Juice Shop 
start_services:
  image: docker:latest
  stage: start_services
  services:
    - docker:dind
  tags:
    - euro-mac
  script:
    - echo "Checking if Juice Shop is already running..."
    - docker ps -a | grep "juice-shop" && docker rm -f juice-shop || echo "No existing container."
    - echo "Starting Juice Shop..."
    - docker run -d --name juice-shop -p 3000:3000 bkimminich/juice-shop
    - sleep 5
    - docker ps
  

extract_metadata:
  stage: extract_metadata
  tags:
    - euro-mac
  script:
    - python3 py-scripts/extract_gitlab_metadata.py
  artifacts:
    paths:
      - $CI_PROJECT_DIR/data/metadata.json
    when: always


# Stage 2 
run_pen_test:
  stage: run_pen_test
  tags:
    - euro-mac
  image: owasp/zap2docker-stable
  script:
    # Run your command and capture its output.
    - mkdir -p data
    - START_TIME=$(date +%s)
    - /System/Volumes/Data/Applications/ZAP.app/Contents/Java/zap.sh -cmd -script "$CI_PROJECT_DIR/zest-scrips/sql_injection_fail.zst" > data/output.txt
    - /System/Volumes/Data/Applications/ZAP.app/Contents/Java/zap.sh -cmd -script "$CI_PROJECT_DIR/zest-scrips/premium_key_get.zst" >> data/output.txt
    - /System/Volumes/Data/Applications/ZAP.app/Contents/Java/zap.sh -cmd -script "$CI_PROJECT_DIR/zest-scrips/sql_injection_login_2.zst" >> data/output.txt
    - END_TIME=$(date +%s)
    - 'echo "Time taken: $((END_TIME - START_TIME)) seconds" >> $CI_PROJECT_DIR/data/output.txt'
    - 'echo "Test Suite: Zest Security Tests" >> $CI_PROJECT_DIR/data/output.txt'
    - 'echo "Test Type: advanced" >> $CI_PROJECT_DIR/data/output.txt'
    - 'echo "Category: general" >> $CI_PROJECT_DIR/data/output.txt'
    - python3 py-scripts/json_processing.py $CI_PROJECT_DIR/data/output.txt $CI_PROJECT_DIR/data/output.json $CI_PROJECT_DIR/data/metadata.json
  # Artifacts are saved even if the job fails:
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/data/output.txt
      - $CI_PROJECT_DIR/data/output.json




# 3️⃣ JSON data to PostgreSQL
save_results:
  image: python:3.9
  stage: save_results
  needs:
    - run_pen_test
  before_script:
    # Create a virtual environment
    - python3 -m venv venv
    
    # Activate the virtual environment
    - source venv/bin/activate
    
    # Now we can safely install packages in our isolated environment
    - python3 -m pip install --upgrade pip
    - python3 -m pip install psycopg2-binary python-dotenv
    
    # Verify our environment
    - echo "Python environment information:"
    - which python3
    - python3 --version
    - pip list
    
    # Show our working directory and contents
    - echo "Current directory structure:"
    - pwd
    - ls -la
    
  tags:
    - euro-mac 
  
  script:
    # Make sure we're still in our virtual environment when running the script
    - source venv/bin/activate
    - python3 py-scripts/send_test_results_to_SQL.py
  
  artifacts:
    paths:
      - data/
    when: always
  allow_failure: false

# 4️⃣ Grafana
grafana_visualization:
  stage: visualize

  before_script:
  - ls -l $CI_PROJECT_DIR/grafana/provisioning/dashboards/security/
  - ls -l $CI_PROJECT_DIR/grafana/provisioning/dashboards/manager/
  tags:
    - euro-mac
  script:
  - echo "Stopping any existing Grafana container..."
  - docker stop grafana || true
  - docker rm grafana || true

  - echo "Starting Grafana with PostgreSQL as its database and provisioning settings..."
  - docker run -d --name=grafana -p 4000:3000 
      -v grafana_data:/var/lib/grafana 
      -v $CI_PROJECT_DIR/grafana/provisioning/dashboards/security:/etc/grafana/provisioning/dashboards/security 
      -v $CI_PROJECT_DIR/grafana/provisioning/dashboards/manager:/etc/grafana/provisioning/dashboards/manager 
      -v $CI_PROJECT_DIR/grafana/provisioning/dashboards/software:/etc/grafana/provisioning/dashboards/software
      -v $CI_PROJECT_DIR/grafana/provisioning/dashboards/admin:/etc/grafana/provisioning/dashboards/admin
      -v $CI_PROJECT_DIR/grafana/provisioning/dashboards/dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml 
      -v $CI_PROJECT_DIR/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources 
      grafana/grafana:latest

  - sleep 10

  - echo "Checking Grafana logs..."
  - docker logs grafana

  - echo "Testing Grafana provisioning..."
  - curl -s -u admin:admin http://localhost:4000/api/search?query=

