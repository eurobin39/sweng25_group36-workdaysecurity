#demo9eddsfdfdssd

# TODO
# include:
#   - local: "pipeline/stages/eurosPart.yml"
#   - local: "pipeline/stages/timsPart.yml"

stages:
  - start_services
  - extract_metadata
  - run_pen_test
  - save_results
  - visualize

# Stage 1 start target service
start_services:
  image: docker:latest
  stage: start_services
  services:
    - docker:dind
  tags:
    - bin-runner
  script:
    - echo "Checking if Juice Shop is already running..."
    - docker ps -a | grep "juice-shop" && docker rm -f juice-shop || echo "No existing container."
    
    # Create and run a shell script for the port checking and cleanup
    - |
      cat > cleanup_port.sh << 'EOF'
      #!/bin/bash
      echo "Checking for processes using port 3000..."
      PORT_PID=$(netstat -tulnp 2>/dev/null | grep ":3000 " | awk '{print $7}' | cut -d'/' -f1 || echo "")
      if [ ! -z "$PORT_PID" ]; then
        echo "Found process using port 3000: PID $PORT_PID"
        echo "Killing process on port 3000..."
        kill -9 $PORT_PID || true
        sleep 2
      fi
      
      echo "Checking for Docker containers using port 3000..."
      PORT_CONTAINER=$(docker ps -q --filter publish=3000 || echo "")
      if [ ! -z "$PORT_CONTAINER" ]; then
        echo "Found container using port 3000: $PORT_CONTAINER"
        echo "Stopping container..."
        docker stop $PORT_CONTAINER
        docker rm $PORT_CONTAINER
      fi
      EOF
    
    - chmod +x cleanup_port.sh
    - ./cleanup_port.sh
    
    # Wait a moment for the port to be fully released
    - sleep 3
    
    # Start Juice Shop
    - echo "Starting Juice Shop on port 3000..."
    - docker run -d --name juice-shop -p 3000:3000 bkimminich/juice-shop:latest-arm
    
    - sleep 5
    - docker ps
    - echo "Juice Shop running on port 3000"


# Stage 2 extract necessary metadata
extract_metadata:
  stage: extract_metadata

  tags:
    - bin-runner
  script:
    - python3 $CI_PROJECT_DIR/SecOps/pipeline/py-scripts/extract_gitlab_metadata.py $CI_PROJECT_DIR/SecOps/artifacts/metadata.json
  artifacts:
    paths:
      - $CI_PROJECT_DIR/SecOps/artifacts/metadata.json
    when: always


# Stage 3 run pen tests
run_pen_test:
  stage: run_pen_test
  tags:
    - bin-runner
  image: ghcr.io/zaproxy/zaproxy:stable
  script:
    # Run your command and capture its output.
    - mkdir -p SecOps/artifacts
    - START_TIME=$(date +%s)
    - /home/gitlab-runner/zap/zap.sh -cmd -script "$CI_PROJECT_DIR/zest-scrips/sql_injection_fail.zst" > $CI_PROJECT_DIR/SecOps/artifacts/output.txt
    - /home/gitlab-runner/zap/zap.sh -cmd -script "$CI_PROJECT_DIR/zest-scrips/premium_key_get.zst" >> $CI_PROJECT_DIR/SecOps/artifacts/output.txt
    - /home/gitlab-runner/zap/zap.sh -cmd -script "$CI_PROJECT_DIR/zest-scrips/sql_injection_login_2.zst" >> $CI_PROJECT_DIR/SecOps/artifacts/output.txt
    # - docker run -v ./zest-scripts:/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap.sh -cmd -script wrk/sql_injection_fail.zst > data/output.txt
    # - docker run -v ./zest-scripts:/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap.sh -cmd -script wrk/premium_key_get.zst >> data/output.txt
    # - docker run -v ./zest-scripts:/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap.sh -cmd -script wrk/sql_injection_login_2.zst >> data/output.txt
    - END_TIME=$(date +%s)
    - 'echo "Time taken: $((END_TIME - START_TIME)) seconds" >> $CI_PROJECT_DIR/SecOps/artifacts/output.txt'
    - 'echo "Test Suite: Zest Security Tests" >> $CI_PROJECT_DIR/SecOps/artifacts/output.txt'
    - 'echo "Test Type: advanced" >> $CI_PROJECT_DIR/SecOps/artifacts/output.txt'
    - 'echo "Category: general" >> $CI_PROJECT_DIR/SecOps/artifacts/output.txt'
    - python3 SecOps/pipeline/py-scripts/json_processing.py $CI_PROJECT_DIR/SecOps/artifacts/output.txt $CI_PROJECT_DIR/SecOps/artifacts/output.json $CI_PROJECT_DIR/SecOps/artifacts/metadata.json
  # Artifacts are saved even if the job fails:
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/SecOps/artifacts/output.txt
      - $CI_PROJECT_DIR/SecOps/artifacts/output.json




# Stage 4 save JSON data to PostgreSQL
save_results:
  image: python:3.9
  stage: save_results
  needs:
    - run_pen_test
  before_script:
    # Create a virtual environment
    - python3 -m venv venv

    # Activate the virtual environment
    - source venv/bin/activate

    # Now we can safely install packages in our isolated environment
    - python3 -m pip install --upgrade pip
    - python3 -m pip install psycopg2-binary python-dotenv

    # Verify our environment
    - echo "Python environment information:"
    - which python3
    - python3 --version
    - pip list

    # Show our working directory and contents
    - echo "Current directory structure:"
    - pwd
    - ls -la

  tags:
    - bin-runner

  script:
    # Make sure we're still in our virtual environment when running the script
    - source venv/bin/activate
    - python3 SecOps/pipeline/py-scripts/send_test_results_to_SQL.py $CI_PROJECT_DIR/SecOps/artifacts/output.json

  artifacts:
    paths:
      - SecOps/artifacts
    when: always
  allow_failure: false

# Stage 5 Grafana
grafana_visualization:
  stage: visualize
  
  before_script:
  - ls -l $CI_PROJECT_DIR/Grafana/provisioning/dashboards/security/
  - ls -l $CI_PROJECT_DIR/Grafana/provisioning/dashboards/manager/
  tags:
    - bin-runner
  script:
  - echo "Stopping any existing Grafana container..."
  - docker stop grafana || true
  - docker rm grafana || true
  
  - echo "Starting Grafana with PostgreSQL as its database and provisioning settings..."
  - docker run -d --name=grafana --network=host
      -v grafana_data:/var/lib/grafana
      -v ~/project/sweng25_group36-workdaysecurity/Grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      -v ~/project/sweng25_group36-workdaysecurity/Grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      -e "GF_SERVER_HTTP_PORT=4000"
      grafana/grafana:latest
  
  - sleep 20
  
  - echo "Checking Grafana logs..."
  - docker logs grafana
  
  - echo "Testing Grafana provisioning..."
  - curl -s -u admin:admin http://localhost:4000/api/search?query=