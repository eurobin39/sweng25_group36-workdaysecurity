#demo9eddsfdfds

# TODO
# include:
#   - local: "pipeline/stages/eurosPart.yml"
#   - local: "pipeline/stages/timsPart.yml"

stages:
  - start_services
  - extract_metadata
  - run_pen_test
  - save_results
  - visualize

# Stage 1 start target service
start_services:
  image: docker:latest
  stage: start_services
  services:
    - docker:dind
  tags:
    - bin-runner
  script:
    - echo "Checking if Juice Shop is already running..."
    - docker ps -a | grep "juice-shop" && docker rm -f juice-shop || echo "No existing container."
    - echo "Starting Juice Shop..."
    # changed the juice shop version bellow (added :latest-arm) might need to take it out if not using bin-runner
    - docker run -d --name juice-shop -p 3000:3000 bkimminich/juice-shop:latest-arm
    - sleep 5
    - docker ps


# Stage 2 extract necessary metadata
extract_metadata:
  stage: extract_metadata

  tags:
    - bin-runner
  script:
    - python3 SecOps/pipeline/py-scripts/extract_gitlab_metadata.py $CI_PROJECT_DIR/SecOps/artifacts/metadata.json
  artifacts:
    paths:
      - $CI_PROJECT_DIR/SecOps/artifacts/metadata.json
    when: always


# Stage 3 run pen tests
run_pen_test:
  stage: run_pen_test
  tags:
    - bin-runner
  image: ghcr.io/zaproxy/zaproxy:stable
  script:
    # Run your command and capture its output.
    - mkdir -p SecOps/artifacts
    - START_TIME=$(date +%s)
    - /home/gitlab-runner/zap/zap.sh -cmd -script "$CI_PROJECT_DIR/zest-scrips/sql_injection_fail.zst" > $CI_PROJECT_DIR/SecOps/artifacts/output.txt
    - /home/gitlab-runner/zap/zap.sh -cmd -script "$CI_PROJECT_DIR/zest-scrips/premium_key_get.zst" >> $CI_PROJECT_DIR/SecOps/artifacts/output.txt
    - /home/gitlab-runner/zap/zap.sh -cmd -script "$CI_PROJECT_DIR/zest-scrips/sql_injection_login_2.zst" >> $CI_PROJECT_DIR/SecOps/artifacts/output.txt
    # - docker run -v ./zest-scripts:/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap.sh -cmd -script wrk/sql_injection_fail.zst > data/output.txt
    # - docker run -v ./zest-scripts:/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap.sh -cmd -script wrk/premium_key_get.zst >> data/output.txt
    # - docker run -v ./zest-scripts:/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap.sh -cmd -script wrk/sql_injection_login_2.zst >> data/output.txt
    - END_TIME=$(date +%s)
    - 'echo "Time taken: $((END_TIME - START_TIME)) seconds" >> $CI_PROJECT_DIR/SecOps/artifacts/output.txt'
    - 'echo "Test Suite: Zest Security Tests" >> $CI_PROJECT_DIR/SecOps/artifacts/output.txt'
    - 'echo "Test Type: advanced" >> $CI_PROJECT_DIR/SecOps/artifacts/output.txt'
    - 'echo "Category: general" >> $CI_PROJECT_DIR/SecOps/artifacts/output.txt'
    - python3 SecOps/pipeline/py-scripts/json_processing.py $CI_PROJECT_DIR/SecOps/artifacts/output.txt $CI_PROJECT_DIR/SecOps/artifacts/output.json $CI_PROJECT_DIR/SecOps/artifacts/metadata.json
  # Artifacts are saved even if the job fails:
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/SecOps/artifacts/output.txt
      - $CI_PROJECT_DIR/SecOps/artifacts/output.json




# Stage 4 save JSON data to PostgreSQL
save_results:
  image: python:3.9
  stage: save_results
  needs:
    - run_pen_test
  before_script:
    # Create a virtual environment
    - python3 -m venv venv

    # Activate the virtual environment
    - source venv/bin/activate

    # Now we can safely install packages in our isolated environment
    - python3 -m pip install --upgrade pip
    - python3 -m pip install psycopg2-binary python-dotenv

    # Verify our environment
    - echo "Python environment information:"
    - which python3
    - python3 --version
    - pip list

    # Show our working directory and contents
    - echo "Current directory structure:"
    - pwd
    - ls -la

  tags:
    - tudor-mac

  script:
    # Make sure we're still in our virtual environment when running the script
    - source venv/bin/activate
    - python3 SecOps/pipeline/py-scripts/send_test_results_to_SQL.py $CI_PROJECT_DIR/SecOps/artifacts/output.json

  artifacts:
    paths:
      - SecOps/artifacts
    when: always
  allow_failure: false

# Stage 5 Grafana
grafana_visualization:
  stage: visualize

  before_script:
  - ls -l $CI_PROJECT_DIR/grafana/provisioning/dashboards/security/
  - ls -l $CI_PROJECT_DIR/grafana/provisioning/dashboards/manager/
  tags:
    - bin-runner
    # yaroslav-mac
  script:
  - echo "Stopping any existing Grafana container..."
  - docker stop grafana || true
  - docker rm grafana || true

    - echo "Starting Grafana with PostgreSQL as its database and provisioning settings..."
    - docker run -d --name=grafana
        -p 4000:3000
        -v grafana_data:/var/lib/grafana
        -v $CI_PROJECT_DIR/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
        -v $CI_PROJECT_DIR/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
        -v $CI_PROJECT_DIR/grafana/dashboards:/var/lib/grafana/dashboards
        grafana/grafana:latest

    - sleep 20

  - echo "Checking Grafana logs..."
  - docker logs grafana

    - echo "Testing Grafana provisioning..."
    - curl -s -u admin:admin http://localhost:4000/api/search?query=
